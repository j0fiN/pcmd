{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PCMD A super simple terminal command shortener \ud83d\udc1f Source code : https://github.com/j0fiN/pcmd v2.3.0 OUT NOW! pcmd has been updated to v2.3.0! Argument features in run command Check it out! About During daily development, it can be frustrating, to type long commands when you start up the terminal for the day (or when your terminal shuts down due to unknown reasons!) or, to type a set of terminal commands repeatedly to do configuration, checks, and so on. For these problems... pcmd comes in handy It's main features are It helps to execute commands with a user-define name It helps to execute multiple commands with just a single user-defined name A single config file ... ... and your ready to go ! Installation pip $ pip install pcmd ---> 100 % poetry $ poetry add pcmd ---> 100 % Note Ensure that you install the package globally in your machine to use it as a universal CLI for all your projects. Move on ! Excited to work using pcmd ?! Head over to the User Guide","title":"Overview"},{"location":"#pcmd","text":"A super simple terminal command shortener \ud83d\udc1f Source code : https://github.com/j0fiN/pcmd v2.3.0 OUT NOW! pcmd has been updated to v2.3.0! Argument features in run command Check it out!","title":"PCMD"},{"location":"#about","text":"During daily development, it can be frustrating, to type long commands when you start up the terminal for the day (or when your terminal shuts down due to unknown reasons!) or, to type a set of terminal commands repeatedly to do configuration, checks, and so on. For these problems... pcmd comes in handy It's main features are It helps to execute commands with a user-define name It helps to execute multiple commands with just a single user-defined name A single config file ... ... and your ready to go !","title":"About"},{"location":"#installation","text":"pip $ pip install pcmd ---> 100 % poetry $ poetry add pcmd ---> 100 % Note Ensure that you install the package globally in your machine to use it as a universal CLI for all your projects.","title":"Installation"},{"location":"#move-on","text":"Excited to work using pcmd ?! Head over to the User Guide","title":"Move on !"},{"location":"design/","text":"Design and Inspiration What inspired pcmd? What is its backbone? And how they helped to make the package better? Backbone Typer Typer is a library for building CLI applications. It is based on Python 3.6+ type hints. Building CLIs has become 'Type few lines of code and run' using this library, and it has never been easier. CLI built using Typer can also be easily scaled up in complexity. pcmd uses it for For everything! pcmd is completely developed using Typer . It has also inspired in bringing more focus on type hinting. It is the perfect tool to build small and effective CLIs (like pcmd ) and it provides a comfortable pathway to scale it up into big CLIs without much headache. Typer also provides built-in command autocompletion to pcmd . Fun Fact! The complete documentation and the gitmoji commits of pcmd was also inspired by the author's great works in FastApi and Typer PyYAML PyYAML is a YAML parser and emitter for Python. It is the most commonly used yaml parser in the language. pcmd uses it for All the works related to cmd.yaml . The inspect command uses pyaml exceptions to handle syntax errors in cmd.yaml . Distance Distance is a Utilities library for comparing sequences. pcmd uses it for Finding the levenshtein distance to suggest custom commands when user inputs the wrong name (name that does not exist in cmd.yaml). Inspiration and Idea - From the author of pcmd. \"I needed a tool that could take away all my hassles in typing atrocious terminal commands to a 'write-once-run-anytime-with-just-a-few-words' system. I thought that this issue might not be only for me but for other developers too. I realized that if a tool could do that, it would increase our workflow to another extent.\" ~ Jofin F Archbald","title":"Design and Inspiration"},{"location":"design/#design-and-inspiration","text":"What inspired pcmd? What is its backbone? And how they helped to make the package better?","title":"Design and Inspiration"},{"location":"design/#backbone","text":"","title":"Backbone"},{"location":"design/#typer","text":"Typer is a library for building CLI applications. It is based on Python 3.6+ type hints. Building CLIs has become 'Type few lines of code and run' using this library, and it has never been easier. CLI built using Typer can also be easily scaled up in complexity. pcmd uses it for For everything! pcmd is completely developed using Typer . It has also inspired in bringing more focus on type hinting. It is the perfect tool to build small and effective CLIs (like pcmd ) and it provides a comfortable pathway to scale it up into big CLIs without much headache. Typer also provides built-in command autocompletion to pcmd . Fun Fact! The complete documentation and the gitmoji commits of pcmd was also inspired by the author's great works in FastApi and Typer","title":"Typer"},{"location":"design/#pyyaml","text":"PyYAML is a YAML parser and emitter for Python. It is the most commonly used yaml parser in the language. pcmd uses it for All the works related to cmd.yaml . The inspect command uses pyaml exceptions to handle syntax errors in cmd.yaml .","title":"PyYAML"},{"location":"design/#distance","text":"Distance is a Utilities library for comparing sequences. pcmd uses it for Finding the levenshtein distance to suggest custom commands when user inputs the wrong name (name that does not exist in cmd.yaml).","title":"Distance"},{"location":"design/#inspiration-and-idea-from-the-author-of-pcmd","text":"\"I needed a tool that could take away all my hassles in typing atrocious terminal commands to a 'write-once-run-anytime-with-just-a-few-words' system. I thought that this issue might not be only for me but for other developers too. I realized that if a tool could do that, it would increase our workflow to another extent.\" ~ Jofin F Archbald","title":"Inspiration and Idea - From the author of pcmd."},{"location":"dev/","text":"Development - Contributing Before diving into the code, here are some guidelines for contribution. Installation For any contribution (doc or code), pcmd must be installed globally. This installation will be for working with cmd.yaml which has some useful commands for developement. $ pip install pcmd Now, pcmd uses, poetry - Build, package and publish the project pytest - Build tests flake8 - Code style guide mypy - Type checking coverage - Test coverage pytest-cov - For coverage in pytest mkdocs-material - Documentation All these can be downloaded by, pip $ pip install -r dev-requirements.txt ---> 100 % poetry $ poetry install ---> 100 % Developement The cmd.yaml in the root directory has single-letter commands for each command in pcmd $ pcmd run r # run command $ pcmd run i # inspect command $ pcmd list -p # check out the other commands too Pre-Commit check The cmd.yaml in the root directory has a command chain with the name check $ pcmd run check This will run pytest tests flake8 checks mypy inspection (if specified) code coverage (with the number of lines not covered). Making things much easier! Documentation The cmd.yaml in the root directory has command named doc to test the documentation in the local server. pcmd run doc Conclusion Do follow the gitmoji style of commit messages. Do fork the repo and come up with crazy PRs! Do \ud83c\udf1f the repo if you like it!","title":"Development - Contributing"},{"location":"dev/#development-contributing","text":"Before diving into the code, here are some guidelines for contribution.","title":"Development - Contributing"},{"location":"dev/#installation","text":"For any contribution (doc or code), pcmd must be installed globally. This installation will be for working with cmd.yaml which has some useful commands for developement. $ pip install pcmd Now, pcmd uses, poetry - Build, package and publish the project pytest - Build tests flake8 - Code style guide mypy - Type checking coverage - Test coverage pytest-cov - For coverage in pytest mkdocs-material - Documentation All these can be downloaded by, pip $ pip install -r dev-requirements.txt ---> 100 % poetry $ poetry install ---> 100 %","title":"Installation"},{"location":"dev/#developement","text":"The cmd.yaml in the root directory has single-letter commands for each command in pcmd $ pcmd run r # run command $ pcmd run i # inspect command $ pcmd list -p # check out the other commands too","title":"Developement"},{"location":"dev/#pre-commit-check","text":"The cmd.yaml in the root directory has a command chain with the name check $ pcmd run check This will run pytest tests flake8 checks mypy inspection (if specified) code coverage (with the number of lines not covered). Making things much easier!","title":"Pre-Commit check"},{"location":"dev/#documentation","text":"The cmd.yaml in the root directory has command named doc to test the documentation in the local server. pcmd run doc","title":"Documentation"},{"location":"dev/#conclusion","text":"Do follow the gitmoji style of commit messages. Do fork the repo and come up with crazy PRs! Do \ud83c\udf1f the repo if you like it!","title":"Conclusion"},{"location":"examples/","text":"Examples Here are a few examples of how you can use pcmd . # SINGLE COMMANDS hi : echo hello from pcmd! # Running files deep inside the project in poetry run-poetry : poetry run python a\\long\\path\\to\\a\\file.py # Using python run-py : python a\\long\\path\\to\\a\\file.py # copy certain data to clipboard for pasting purposes. addr : echo NO:2, Abbey Road, Earth | CLIP # for windows # \ud83d\udcb2pcmd run addr # No need to type long text anymore for any applications!! # NEW FEATURES: ARGUMENTS! git : - git init - git add <0> - git commit -m <1> <2> <3> # in the terminal, # \ud83d\udcb2pcmd run git -a . -a Update -a Config -a Files # MULTIPLE COMMANDS list : - echo git init - echo git add . - echo git commit -m 'Added feature to run multiple commands' - echo git push # Sample project initiations from github node-github : - git clone <link> - cd <project name> - npm install - nodemon start flask-github : - git clone <link> - cd <project name> - pip install -r requirements.txt - py app.py # An Alternative for requirements.txt ! install : - pip install pcmd - pip install fastapi - pip install tensorflow # Commands which has prompts prompt : - pip install utile==1.0 - pip uninstall utile # This is a command with a user confirmation - pip install utile==1.0 # pre-commit checks are useful for open-source projects, # which has various tests, checks and reports. check : - poetry run pytest --cov - echo ---------------------- - echo Flake test - flake8 - echo ---------------------- - echo mypy test - mypy . # Check API endpoints user-1 : curl http://localhost:5000/user/1 # Checking multiple endpoints using a single custom command ! user-all : - curl http://localhost:5000/user/1 - curl http://localhost:5000/user/1/profile - curl http://localhost:5000/user/1/blogs - curl http://localhost:5000/user/1/followers # ================================== # Commands which Do NOT work \u274c py : - py # Python Shell is opened (this applies any shell; node, mongo, etc) - print('Hello') # This does not work within the shell \u274c - exit() # This does not work within the shell \u274c activate : - py -m venv env # env is created - /env/Scripts/activate # but CANNOT be activated in the terminal \u274c - pip install -r requirements.txt # since previous does not work, # this will install the packages globally (which is a mess!) git : - git add <1> # this is invalid since argument must start with 0 \u274c Note Examples here work only if configured already. An example: poetry command won't work if you don't have poetry installed!","title":"Examples"},{"location":"examples/#examples","text":"Here are a few examples of how you can use pcmd . # SINGLE COMMANDS hi : echo hello from pcmd! # Running files deep inside the project in poetry run-poetry : poetry run python a\\long\\path\\to\\a\\file.py # Using python run-py : python a\\long\\path\\to\\a\\file.py # copy certain data to clipboard for pasting purposes. addr : echo NO:2, Abbey Road, Earth | CLIP # for windows # \ud83d\udcb2pcmd run addr # No need to type long text anymore for any applications!! # NEW FEATURES: ARGUMENTS! git : - git init - git add <0> - git commit -m <1> <2> <3> # in the terminal, # \ud83d\udcb2pcmd run git -a . -a Update -a Config -a Files # MULTIPLE COMMANDS list : - echo git init - echo git add . - echo git commit -m 'Added feature to run multiple commands' - echo git push # Sample project initiations from github node-github : - git clone <link> - cd <project name> - npm install - nodemon start flask-github : - git clone <link> - cd <project name> - pip install -r requirements.txt - py app.py # An Alternative for requirements.txt ! install : - pip install pcmd - pip install fastapi - pip install tensorflow # Commands which has prompts prompt : - pip install utile==1.0 - pip uninstall utile # This is a command with a user confirmation - pip install utile==1.0 # pre-commit checks are useful for open-source projects, # which has various tests, checks and reports. check : - poetry run pytest --cov - echo ---------------------- - echo Flake test - flake8 - echo ---------------------- - echo mypy test - mypy . # Check API endpoints user-1 : curl http://localhost:5000/user/1 # Checking multiple endpoints using a single custom command ! user-all : - curl http://localhost:5000/user/1 - curl http://localhost:5000/user/1/profile - curl http://localhost:5000/user/1/blogs - curl http://localhost:5000/user/1/followers # ================================== # Commands which Do NOT work \u274c py : - py # Python Shell is opened (this applies any shell; node, mongo, etc) - print('Hello') # This does not work within the shell \u274c - exit() # This does not work within the shell \u274c activate : - py -m venv env # env is created - /env/Scripts/activate # but CANNOT be activated in the terminal \u274c - pip install -r requirements.txt # since previous does not work, # this will install the packages globally (which is a mess!) git : - git add <1> # this is invalid since argument must start with 0 \u274c Note Examples here work only if configured already. An example: poetry command won't work if you don't have poetry installed!","title":"Examples"},{"location":"releases/","text":"Releases From v2.2.0 onwards, git commits will NOT be recorded here. Check out CHANGELOG.md for git commits record. v2.2.0 add command Added add command which allows users to add their single command along with its custom name. Suggestion system built to help users when they type the wrong name. Complete codebase refactored. Reduced types complexity. v2.1.0 Feature Fixed extras installation. v2.0.0 Features complete theme change from purple to cyan. python 3.6 compatability (prev versions were 3.8 and above). Introducing init and inspect commands. -p flag in list command. seperate docs pages built in github pages. cd command functionality. os.system replaced with subprocess.run . Added contribution guidelines. Added test coverage. Added proper warnings. v1.2.3 check for cmd.yaml FileNotFound issue v1.2.3 path bug fixed Changed path to palin file name. v1.2.2 Documentation fixes and bug fix Pypi readme link fixed, changelogs typo fixed. App call removed. - v1.2.2 resolved docs and app call - Removed app call - Fixed broken source code link v1.2.1 Bug fix in list command v1.2.1 resolved list command bug list function else case v1.2.0 list command, github wiki docs and easter egg Now subprocess module used to run commands ( os.system() removed) Changed to v1.2.0 Included links to github Setting up for package build typos and grammar Remove github workflow Testing Fails Merge branch 'main' of https://github.com/j0fiN/pcmd into main For CI Added workflow Added final touches Added pcmd fish Added list command logo and banner Added lala Added logo v1.1.0 Running Multiple commands using a simgle user-defined command Updated Warning and Usage \ud83e\uddf0 Updated docs Added test for multiple commands. Updated v1.1.0 Updated docs for git and pypi. Added feature of running multiple commands. v1.0.0 pcmd Typo Updated and fixed typos Updated readme. Hotfix in package publishing. Typo in docs Added tests Fixed path issues. Updated readme Change .yml to .yaml. Add pcmd Initial commit","title":"Releases"},{"location":"releases/#releases","text":"From v2.2.0 onwards, git commits will NOT be recorded here. Check out CHANGELOG.md for git commits record.","title":"Releases"},{"location":"releases/#v220","text":"","title":"v2.2.0"},{"location":"releases/#add-command","text":"Added add command which allows users to add their single command along with its custom name. Suggestion system built to help users when they type the wrong name. Complete codebase refactored. Reduced types complexity.","title":"add command"},{"location":"releases/#v210","text":"","title":"v2.1.0"},{"location":"releases/#feature","text":"Fixed extras installation.","title":"Feature"},{"location":"releases/#v200","text":"","title":"v2.0.0"},{"location":"releases/#features","text":"complete theme change from purple to cyan. python 3.6 compatability (prev versions were 3.8 and above). Introducing init and inspect commands. -p flag in list command. seperate docs pages built in github pages. cd command functionality. os.system replaced with subprocess.run . Added contribution guidelines. Added test coverage. Added proper warnings.","title":"Features"},{"location":"releases/#v123","text":"","title":"v1.2.3"},{"location":"releases/#check-for-cmdyaml-filenotfound-issue","text":"v1.2.3 path bug fixed Changed path to palin file name.","title":"check for cmd.yaml FileNotFound issue"},{"location":"releases/#v122","text":"","title":"v1.2.2"},{"location":"releases/#documentation-fixes-and-bug-fix","text":"Pypi readme link fixed, changelogs typo fixed. App call removed. - v1.2.2 resolved docs and app call - Removed app call - Fixed broken source code link","title":"Documentation fixes and  bug fix"},{"location":"releases/#v121","text":"","title":"v1.2.1"},{"location":"releases/#bug-fix-in-list-command","text":"v1.2.1 resolved list command bug list function else case","title":"Bug fix in list command"},{"location":"releases/#v120","text":"","title":"v1.2.0"},{"location":"releases/#list-command-github-wiki-docs-and-easter-egg","text":"Now subprocess module used to run commands ( os.system() removed) Changed to v1.2.0 Included links to github Setting up for package build typos and grammar Remove github workflow Testing Fails Merge branch 'main' of https://github.com/j0fiN/pcmd into main For CI Added workflow Added final touches Added pcmd fish Added list command logo and banner Added lala Added logo","title":"list command,  github wiki docs and  easter egg"},{"location":"releases/#v110","text":"","title":"v1.1.0"},{"location":"releases/#running-multiple-commands-using-a-simgle-user-defined-command","text":"Updated Warning and Usage \ud83e\uddf0 Updated docs Added test for multiple commands. Updated v1.1.0 Updated docs for git and pypi. Added feature of running multiple commands.","title":"Running Multiple commands using a simgle user-defined command"},{"location":"releases/#v100","text":"","title":"v1.0.0"},{"location":"releases/#pcmd","text":"Typo Updated and fixed typos Updated readme. Hotfix in package publishing. Typo in docs Added tests Fixed path issues. Updated readme Change .yml to .yaml. Add pcmd Initial commit","title":"pcmd"},{"location":"user_guide/","text":"User Guide Intro We will go through the system requirements, commands, the cmd.yaml file, autocompletion, and other details. System requirements Works equally well on Windows, Linux and OSX. pcmd requires Python 3.6 and above. Support for Python 2 Python 2 is NOT supported by pcmd Adding Colors! To bring in the color scheme of pcmd, install colorama package, however, it is optional. Commands init The init command creates the cmd.yaml file in the current working directory. Note If the cmd.yaml already exists, it will leave the file as it is. To delete the file and create it again, use the --force (-f) flag. This can be useful when the file gets corrupted due to unfortunate circumstances. $ pcmd init 'cmd.yaml' created. and the cmd.yaml will have, hi : echo Hi from pcmd! add The add command lets you add single commands with custom name (an append operation). --key(-k) - Adds custom name --value(-v) - Adds the command Commands can also be interactively added by using just pcmd add $ pcmd add Enter custom name: docker Enter command: docker run Command added in cmd.yaml inspect Inspects if cmd.yaml exists and if there are any syntax errors or encoding errors. $ pcmd inspect PCMD Inspection : 'cmd.yaml' file found! 'cmd.yaml' is valid! Tip If your file has encoding errors which cannot be resolved, you can start afresh using init -f command. run This is the key command of pcmd . It runs your commands when given the specific custom name. $ pcmd run hi Hi from pcmd! # this works since cmd.yaml had a custom name 'hi' Warning Commands which involve changes or reload of terminal will NOT work. Some examples are, - activating enviroments using /env/Scripts/activate - Starting python , node , mongo or any other shell. The shell will open, but the commands after it will not work. For more understanding, see some of the examples provided. Technical details Any commands which involve in the initiation of the child process will work in pcmd . The caveat is that the commands which are supposed to work in the child process will only work in the parent process, resulting in no command execution in the child process. For this reason, pcmd has a seperate functionality for the most-used cd command, which works perfectly fine. list Lists the complete cmd.yaml . Useful to refer to commands rather than opening the cmd.yaml . $ pcmd list =======PCMD======= Path : path\\to\\project\\cmd.yaml c-and-p: - git commit -m \"small demo\" - git push hi: echo Hi from pcmd! --pretty (-p) : pretty prints the complete list (Useful for easier reading of large cmd.yaml files). Example $ pcmd list -p =======PCMD======= Path : path\\to\\project\\cmd.yaml hi : echo Hi from pcmd! c-and-p : - git commit -m \"small demo\" - git push fish - ACSII Art of pcmd along with other useful links. cmd.yaml file This is the file that should contain all your commands paired up with your custom name. Note If file is created manually, it must be named cmd.yaml and NOT cmd.yml For single commands, type in the format of <name>: <command> . cmd.yaml hi : echo hi from pcmd! check : poetry run pytest For multiple commands, type the <name> , along with the list of command using the hyphen( - ) symbol. cmd.yaml c-init : - git commit -m 'init commit' - git push Argument Provision for commands To provide arguments for command we use the <index> where index MUST start from 0-9 cmd.yaml git : - git commit -m <0> - git push and in the terminal, Terminal $ pcmd run git -a Update Argument Limitations in pcmd The index used in the placeholder is a crucial. It must start from 0 all the way upto 9. Also, only 10 arguments are allowed as of now. Argument should not have blank space in between To provide multiple arguments, pcmd run command -a arg1 -a arg2 -a arg3 Useful tips in cmd.yaml You can always check the syntax of the cmd.yaml using inspect command. You can see the complete list of the file using pcmd list -p command. Avoid using same custom names for two different commands. Autocompletion from Typer pcmd is built using Typer , which provides some stunning in-built autocompletion features. For more details, check out their docs Note To Install autocompletion for the current shell. $ pcmd --install-completion To show completion for the current shell, to copy it or customize the installation. $ pcmd --show-completion Using python -m pcmd can also be executed as a script. i.e., you can use python -m to execute the CLI. python $ python -m pcmd init -f 'cmd.yaml' created. python via poetry $ poetry run python -m pcmd init -f 'cmd.yaml' created. Docs within CLI. To check out pcmd docs within the CLI, $ pcmd [ COMMAND ] --help # Example: pcmd run --help For full docs, $ pcmd","title":"User Guide"},{"location":"user_guide/#user-guide","text":"","title":"User Guide"},{"location":"user_guide/#intro","text":"We will go through the system requirements, commands, the cmd.yaml file, autocompletion, and other details.","title":"Intro"},{"location":"user_guide/#system-requirements","text":"Works equally well on Windows, Linux and OSX. pcmd requires Python 3.6 and above. Support for Python 2 Python 2 is NOT supported by pcmd Adding Colors! To bring in the color scheme of pcmd, install colorama package, however, it is optional.","title":"System requirements"},{"location":"user_guide/#commands","text":"","title":"Commands"},{"location":"user_guide/#init","text":"The init command creates the cmd.yaml file in the current working directory. Note If the cmd.yaml already exists, it will leave the file as it is. To delete the file and create it again, use the --force (-f) flag. This can be useful when the file gets corrupted due to unfortunate circumstances. $ pcmd init 'cmd.yaml' created. and the cmd.yaml will have, hi : echo Hi from pcmd!","title":"init"},{"location":"user_guide/#add","text":"The add command lets you add single commands with custom name (an append operation). --key(-k) - Adds custom name --value(-v) - Adds the command Commands can also be interactively added by using just pcmd add $ pcmd add Enter custom name: docker Enter command: docker run Command added in cmd.yaml","title":"add"},{"location":"user_guide/#inspect","text":"Inspects if cmd.yaml exists and if there are any syntax errors or encoding errors. $ pcmd inspect PCMD Inspection : 'cmd.yaml' file found! 'cmd.yaml' is valid! Tip If your file has encoding errors which cannot be resolved, you can start afresh using init -f command.","title":"inspect"},{"location":"user_guide/#run","text":"This is the key command of pcmd . It runs your commands when given the specific custom name. $ pcmd run hi Hi from pcmd! # this works since cmd.yaml had a custom name 'hi' Warning Commands which involve changes or reload of terminal will NOT work. Some examples are, - activating enviroments using /env/Scripts/activate - Starting python , node , mongo or any other shell. The shell will open, but the commands after it will not work. For more understanding, see some of the examples provided. Technical details Any commands which involve in the initiation of the child process will work in pcmd . The caveat is that the commands which are supposed to work in the child process will only work in the parent process, resulting in no command execution in the child process. For this reason, pcmd has a seperate functionality for the most-used cd command, which works perfectly fine.","title":"run"},{"location":"user_guide/#list","text":"Lists the complete cmd.yaml . Useful to refer to commands rather than opening the cmd.yaml . $ pcmd list =======PCMD======= Path : path\\to\\project\\cmd.yaml c-and-p: - git commit -m \"small demo\" - git push hi: echo Hi from pcmd! --pretty (-p) : pretty prints the complete list (Useful for easier reading of large cmd.yaml files). Example $ pcmd list -p =======PCMD======= Path : path\\to\\project\\cmd.yaml hi : echo Hi from pcmd! c-and-p : - git commit -m \"small demo\" - git push","title":"list"},{"location":"user_guide/#fish","text":"- ACSII Art of pcmd along with other useful links.","title":"fish  "},{"location":"user_guide/#cmdyaml-file","text":"This is the file that should contain all your commands paired up with your custom name. Note If file is created manually, it must be named cmd.yaml and NOT cmd.yml For single commands, type in the format of <name>: <command> . cmd.yaml hi : echo hi from pcmd! check : poetry run pytest For multiple commands, type the <name> , along with the list of command using the hyphen( - ) symbol. cmd.yaml c-init : - git commit -m 'init commit' - git push","title":"cmd.yaml file"},{"location":"user_guide/#argument-provision-for-commands","text":"To provide arguments for command we use the <index> where index MUST start from 0-9 cmd.yaml git : - git commit -m <0> - git push and in the terminal, Terminal $ pcmd run git -a Update Argument Limitations in pcmd The index used in the placeholder is a crucial. It must start from 0 all the way upto 9. Also, only 10 arguments are allowed as of now. Argument should not have blank space in between To provide multiple arguments, pcmd run command -a arg1 -a arg2 -a arg3 Useful tips in cmd.yaml You can always check the syntax of the cmd.yaml using inspect command. You can see the complete list of the file using pcmd list -p command. Avoid using same custom names for two different commands.","title":"Argument Provision for commands"},{"location":"user_guide/#autocompletion-from-typer","text":"pcmd is built using Typer , which provides some stunning in-built autocompletion features. For more details, check out their docs Note To Install autocompletion for the current shell. $ pcmd --install-completion To show completion for the current shell, to copy it or customize the installation. $ pcmd --show-completion","title":"Autocompletion from Typer"},{"location":"user_guide/#using-python-m","text":"pcmd can also be executed as a script. i.e., you can use python -m to execute the CLI. python $ python -m pcmd init -f 'cmd.yaml' created. python via poetry $ poetry run python -m pcmd init -f 'cmd.yaml' created.","title":"Using python -m"},{"location":"user_guide/#docs-within-cli","text":"To check out pcmd docs within the CLI, $ pcmd [ COMMAND ] --help # Example: pcmd run --help For full docs, $ pcmd","title":"Docs within CLI."}]}